# Default values for iam-bb.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Settings for the IAM BB chart as a whole.
# Some settings made here are propagated to the service-specific sections
# through anchors. Make sure not to remove the anchors and references,
# because otherwise the dependent values will not be set.
# Note that further adaptations may still be needed in the service-specific
# sections below.
iam:
  keycloak:
    enabled: &keycloakEnabled true
    # "Official" Keycloak URL
    url: &kcurl https://iam-auth.apx.develop.eoepca.org
    hosts:
      - iam-auth.apx.develop.eoepca.org
    paths:
      - /*
  opa:
    enabled: &opaEnabled true
    createRoute: true
    hosts:
      - iam-opa.apx.develop.eoepca.org
    paths:
      - /*
    # Client credentials:
    # clientId is mandatory if clientSecret is specified or clientSecretRef is *not* specified.
    # Note: If both clientSecret and clientSecretRef are specified, a secret is generated
    # automatically, and the client secret is omitted from the route definition.
    clientId: opa
    # clientSecret: Client secret as plain text
    #clientSecret:
    # clientSecretRef: Name of an existing secret that contains the client secret and maybe further values like the client ID
    #clientSecretRef: opa-route
  identityApi:
    enabled: &identityApiEnabled true
    createRoute: true
    hosts:
      - identity-api.apx.develop.eoepca.org
    paths:
      - /*
    docsPath: /docs/*
    # Client credentials:
    # clientId is mandatory if clientSecret is specified or clientSecretRef is *not* specified.
    # Note: If both clientSecret and clientSecretRef are specified, a secret is generated
    # automatically, and the client secret is omitted from the route definition.
    clientId: identity-api
    # clientSecret: Client secret as plain text
    #clientSecret:
    # clientSecretRef: Name of an existing secret that contains the client secret and maybe further values
    #clientSecretRef: identity-api-route
  apisix:
    enabled: &apisixEnabled true

# ----

keycloak:
  enabled: *keycloakEnabled
  image:
    # The following settings must point to a custom Keycloak image that includes the Keycloak OPA Plugin.
    registry: byud8gih.c1.de1.container-registry.ovh.net
    repository: eoepca/keycloak-with-opa-plugin
    tag: 0.4.0
    digest: ""
    pullPolicy: IfNotPresent
  auth:
    # Admin user credentials. If you specify a clear-text password here, you should make sure to change it
    # before making Keycloak publicly accessible. Alternatively, you may provide the password via an
    # existing (sealed) secret.
    adminUser: &adminUser user
    adminPassword: &adminPwd "kcadmin"
    existingSecret: ""
    passwordSecretKey: ""
  tls:
    # Set this to true to enable TLS
    enabled: false
    autoGenerated: true
  ## @param production Run Keycloak in production mode. TLS configuration is required except when using proxy=edge.
  ##
  production: false
  ## @param proxy reverse Proxy mode edge, reencrypt, passthrough or none
  ## ref: https://www.keycloak.org/server/reverseproxy
  ##
  proxy: edge
  ## @param httpRelativePath Set the path relative to '/' for serving resources. Useful if you are migrating from older version which were using '/auth/'
  ## ref: https://www.keycloak.org/migration/migrating-to-quarkus#_default_context_path_changed
  ##
  httpRelativePath: "/"
  command: []
  ## @param args Override default container args (useful when using custom images)
  ##
  args: []
  ## @param extraEnvVars Extra environment variables to be set on Keycloak container
  extraEnvVars:
    # KC_SPI_POLICY_OPA_OPA_BASE_URI must point to the base URI of the OPA service.
    - name: KC_SPI_POLICY_OPA_OPA_BASE_URI
      value: "http://iam-opal-client:8181/v1/data/"
    # KC_SPI_POLICY_OPA_OPA_POLICY_DIR points to a pod-internal config directory for
    # policies and should not be changed.
    - name: KC_SPI_POLICY_OPA_OPA_POLICY_DIR
      value: "/opt/bitnami/keycloak/conf/opa-policies"
    # KC_HOSTNAME_URL and KC_HOSTNAME_ADMIN_URL should be set to the official base URL
    # of Keycloak (usually the same as iam.keycloak.url)
    - name: KC_HOSTNAME_URL
      value: *kcurl
    - name: KC_HOSTNAME_ADMIN_URL
      value: *kcurl
  ## Service configuration
  ##
  service:
    ## @param service.type Kubernetes service type
    ##
    type: ClusterIP
    ## @param service.http.enabled Enable http port on service
    ##
    http:
      enabled: true
    ## @param service.ports.http Keycloak service HTTP port
    ## @param service.ports.https Keycloak service HTTPS port
    ##
    ports:
      http: 80
      https: 443
    ## @param service.nodePorts [object] Specify the nodePort values for the LoadBalancer and NodePort service types.
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
    ##
    nodePorts:
      http: ""
      https: ""
    ## @param service.clusterIP Keycloak service clusterIP IP
    ## e.g:
    ## clusterIP: None
    ##
    clusterIP: ""
    ## @param service.loadBalancerIP loadBalancerIP for the SuiteCRM Service (optional, cloud specific)
    ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
    ##
    loadBalancerIP: ""
    ## @param service.loadBalancerSourceRanges Address that are allowed when service is LoadBalancer
    ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
    ## Example:
    ## loadBalancerSourceRanges:
    ##   - 10.10.10.0/24
    ##
    loadBalancerSourceRanges: []
    ## @param service.externalTrafficPolicy Enable client source IP preservation
    ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    ##
    externalTrafficPolicy: Cluster
    ## @param service.annotations Additional custom annotations for Keycloak service
    ##
    annotations: {}
    ## @param service.extraPorts Extra port to expose on Keycloak service
    ##
    extraPorts: []
  ## Keycloak ingress parameters
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: false
  ## Keycloak admin ingress parameters
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ##
  adminIngress:
    enabled: false
  postgresql:
    enabled: true
    auth:
      # postgresPassword: "..."
      username: bn_keycloak
      # password: "..."
      database: bitnami_keycloak
      existingSecret: "kc-postgres"
    architecture: standalone

opal:
  enabled: *opaEnabled
  server:
    port: 7002
    policyRepoUrl: https://github.com/EOEPCA/iam-policies.git
    policyRepoSshKey: null
    policyRepoClonePath: null
    policyRepoMainBranch: main
    # Poll only every 5min for now. May be reduced or reconfigured to use webhooks if required.
    pollingInterval: 300
    dataConfigSources:
      # Option #1 - No data sources
      config:
        entries: []

      # Option #2 - Dynamically get data sources
      # external_source_url: "https://your-api.com/path/to/api/endpoint"

      # Option #3 - Example static data sources (endpoint is empty by default)
      # config:
      #   entries:
      #   - url: http://opal-server:7002/policy-data
      #     topics: ["policy_data"]
      #     dst_path: "/static"

      # Option #4 - Leave config empty and instead supply using the OPAL_DATA_CONFIG_SOURCES environment variable through env or secret
      # config: null

    broadcastUri: null
    broadcastPgsql: true
    uvicornWorkers: 4
    replicas: 1
    extraEnv: {
      # "CUSTOM_ENV_VAR": "VALUE"
    }

  client:
    port: 7000
    opaPort: 8181
    replicas: 1
    # If you need to specify a custom hostname for the opal-sever, configure the serverUrl property
    # serverUrl: http://custom-hostname-for-opal:opal-port
    opaStartupData:
      policy.rego: |
        # Simple example policy gives everyone read access to non-system documents
        # and only gives a root user full access.
        package system.authz
        import rego.v1
        jwks_request(url) := http.send({
          "url": url,
          "method": "GET",
          "force_cache": true,
          "force_cache_duration_seconds": 3600 # Cache response for an hour
        })
        jwks := jwks_request("http://iam-keycloak/realms/eoepca/protocol/openid-connect/certs").raw_body
        echo := input if {
          print(input)
        }
        default allow_policy_evaluation := false
        allow_policy_evaluation if {
          # Generally allow GET and POST on /v1/data/**
          #"GET" == input.method
          input.method in ["GET", "POST"]
          "v1" == input.path[0]
          "data" == input.path[1]
          "system" != input.path[2]
        }
        allow_policy_evaluation if {
          # Generally allow POST on /v1/query
          "POST" == input.method
          ["v1", "query"] == input.path
        }
        allow_policy_evaluation if {
          # Generally allow GET on /
          "GET" == input.method
          [""] == input.path
          print("GET /, Input: ", input)
        }
        # Claims from JWT if JWT is present and can be verified; null otherwise 
        default verified_claims = null
        verified_claims := claims if {
          [type, token] := split(input.headers["Authorization"][_], " ")
          type == "Bearer"
          io.jwt.verify_rs256(token, jwks) == true
          claims := io.jwt.decode(token)[1]
        }
        default allow := false
        allow if {
          # Allow everything for "root" identity
          "root$secret" == input.identity
          print("Root identity, Input: ", input)
        }
        allow if {
          # Preliminarily allow policy evaluation if Authorization header is unset,
          # i.e., if the request is anonymous, but originates from within the cluster
          not input.headers["Authorization"]
          allow_policy_evaluation == true
          print("AuthZ unset, Input: ", input)
        }
        allow if {
          # Allow authenticated users to evaluate policies 
          claims := verified_claims
          claims != null
          allow_policy_evaluation == true
          print("External, Input: ", input, " Claims: ", claims)
        }
        allow if {
          # Allow selected Werum users to GET arbitrary URLs 
          claims := verified_claims
          claims.email in ["w-scho@werum.de", "w-jfe@werum.de", "w-mwo@werum.de"]
          input.method = "GET"
          print("External, Input: ", input, " Claims: ", claims)
        }
    extraEnv:
      OPAL_POLICY_STORE_URL: http://localhost:8181
      OPAL_POLICY_STORE_AUTH_TYPE: token
      OPAL_POLICY_STORE_AUTH_TOKEN: root$secret
      OPAL_INLINE_OPA_LOG_FORMAT: full
      OPAL_DATA_UPDATER_ENABLED: False
      OPAL_INLINE_OPA_CONFIG: >-
        {
          "addr": "http://0.0.0.0:8181",
          "authentication": "token",
          "authorization": "basic",
          "files": [ "/opt/opa/startup-data/policy.rego" ]
        }

apisix:
  enabled: *apisixEnabled
  apisix:
    enableIPv6: false
    enableServerTokens: false
    ssl:
      enabled: false
      existingCASecret: "<secret name>"
      certCAFilename: "ca.crt"
    pluginAttrs:
      redirect:
        https_port: 443
  ingress-controller:
    enabled: true

identityApi:
  enabled: *identityApiEnabled

identity-service:
  identity-postgres:
    enabled: false
  identity-keycloak:
    enabled: false
  identity-gatekeeper:
    enabled: false
  identity-api:
    enabled: *identityApiEnabled #true #"{{ .Values.identityApi.enabled }}"
    secrets:
      # Values for secret 'identity-api'
      # Note - if ommitted, these can instead be set by creating the secret independently
      # e.g. as a SealedSecret via GitOps.
      adminPassword: *adminPwd
    deployment:
      # Config values that can be passed via env vars
      extraEnv:
        - name: AUTH_SERVER_URL  # see configMap.authServerUrl instead
          value: *kcurl
        - name: ADMIN_USERNAME
          value: *adminUser #"admin"
        - name: REALM
          value: "eoepca"
        # - name: VERSION
        #   value: v1.0.0
        - name: LOG_LEVEL
          value: DEBUG
